{"version":3,"sources":["components/Table.js","components/AddStockForm.js","components/Chart.js","components/ChartPopup.js","components/Portfolio.js","components/AddPortfolioForm.js","utils.js","index.js"],"names":["Table","react_default","a","createElement","className","Table_TableHeader","Table_TableBody","data","this","props","removeStock","Component","TableHeader","TableBody","stocks","map","stock","index","totalVal","parseFloat","quantity","value","toFixed","key","symbol","onClick","i","length","push","AddStockForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","submitForm","state","isNaN","handleSubmit","initialState","type","onChange","Chart","getRandomColor","color","Math","floor","random","labels","datasets","that","symbols","colors","_loop","url","concat","xhr","XMLHttpRequest","open","onload","e","readyState","status","tsObj","JSON","parse","responseText","console","log","dates","keys","dataset","label","fill","borderColor","j","toConsumableArray","error","statusText","send","es","options","maintainAspectRatio","title","display","text","fontSize","elements","point","radius","line","borderWidth","animation","duration","showLines","legend","position","ChartPopup","reactjs_popup_es","trigger","modal","closeOnDocumentClick","components_Chart","API","Portfolio","filter","assertThisInitialized","toUpperCase","newData","exists","forEach","st","updateStockCookie","totalStockValue","sum","parseInt","submitted","_this2","removePortfolio","components_Table","components_AddStockForm","components_ChartPopup","AddPortfolioForm","onSubmit","preventDefault","setCookie","days","expires","date","Date","setTime","getTime","toUTCString","document","cookie","App","portfolios","portfolio","portf","newPortfolios","newStockData","ports","stringify","objects","components_Portfolio","components_AddPortfolioForm","nameEQ","ca","split","c","charAt","substring","indexOf","getCookie","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.51358b49.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../style.css';\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"scroll\">\r\n            <table>\r\n                <TableHeader />\r\n\r\n                    <TableBody data={this.props.data} removeStock={this.props.removeStock} />\r\n\r\n            </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Symbol</th>\r\n                <th>Value</th>\r\n                <th>Quantity</th>\r\n                <th>Total value</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nconst TableBody = props => {\r\n    let stocks = props.data.map((stock, index) => {\r\n        let totalVal = (parseFloat(stock.quantity) * stock.value).toFixed(2);\r\n        return (\r\n            <tr key={index}>\r\n                <td>{stock.symbol}</td>\r\n                <td>{stock.value}</td>\r\n                <td>{stock.quantity}</td>\r\n                <td>{totalVal}</td>\r\n                <td>\r\n                    <button className=\"del-row\" onClick={() => props.removeStock(index)} />\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n    for (let i = props.data.length; i < 50; i++) {\r\n        stocks.push((\r\n            <tr className=\"empty-row\" key={i}><td /><td /><td /><td /><td /></tr>\r\n        ));\r\n    }\r\n\r\n    return <tbody>{stocks}</tbody>;\r\n};\r\n\r\nexport default Table;","import React, {Component} from \"react\";\r\n\r\nclass AddStockForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            symbol: '',\r\n            value: parseFloat(\"0.00\"),\r\n            quantity: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    };\r\n\r\n    submitForm = () => {\r\n        if (this.state.symbol !== '' && this.state.quantity !== '' && !isNaN(this.state.quantity)) {\r\n            this.props.handleSubmit(this.state);\r\n            this.setState(this.initialState);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"stock-form\">\r\n                <label>Symbol:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"symbol\"\r\n                    className=\"symbol-input-field\"\r\n                    value={this.state.symbol}\r\n                    onChange={this.handleChange} />\r\n                <label>Quantity:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"quantity\"\r\n                    className=\"quantity-input-field\"\r\n                    value={this.state.quantity}\r\n                    onChange={this.handleChange}/>\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Add\"\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddStockForm;","import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst API = \"R2XFYH8AEAQTGTHE\";\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: [],\r\n                datasets: [],\r\n            }\r\n        }\r\n    }\r\n\r\n    getRandomColor = () => {\r\n        let letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    componentDidMount() {\r\n        let that = this;\r\n        let data = this.props.data;\r\n        let symbols = [];\r\n        let colors = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            symbols.push(data[i].symbol);\r\n            colors.push(this.getRandomColor());\r\n        }\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            let url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbols[i]}&outputsize=compact&apikey=${API}`;\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", url, true);\r\n            xhr.onload = function (e) {\r\n                if (xhr.readyState === 4) {\r\n                    if (xhr.status === 200) {\r\n                        let result = JSON.parse(xhr.responseText);\r\n                        const tsObj = result[\"Time Series (Daily)\"];\r\n                        console.log(tsObj);\r\n                        if (typeof tsObj !== \"undefined\") {\r\n                            let dates = Object.keys(tsObj);\r\n                            let dataset = {\r\n                                data: [],\r\n                                label: symbols[i],\r\n                                fill: false,\r\n                                borderColor: colors[i]\r\n                            };\r\n                            for (let j = 0; j < dates.length; j++) {\r\n                                dataset.data.push(parseFloat(tsObj[dates[j]][\"4. close\"]).toFixed(2));\r\n                            }\r\n                            that.setState({\r\n                                data: {\r\n                                    labels: dates,\r\n                                    datasets: [...that.state.data.datasets, dataset]\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        console.error(xhr.statusText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send();\r\n        }\r\n    }\r\n\r\n    // componentWillReceiveProps(nextProps){\r\n    //     if (nextProps.labels !== this.props.labels) {\r\n    //         this.setState({ labels: nextProps.labels })\r\n    //     }\r\n    //     if (nextProps.data !== this.props.data) {\r\n    //         this.setState({ data: nextProps.data })\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.data}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Comparison of stock values',\r\n                            fontSize: 20\r\n                        },\r\n\r\n                        elements: {\r\n                            point:{\r\n                                radius: 0\r\n                            },\r\n                            line:{\r\n                                borderWidth: 2\r\n                            }\r\n                        },\r\n                        animation: {\r\n                            duration: 0\r\n                        },\r\n                        showLines: true,\r\n                        fill: false\r\n                    }}\r\n                    legend={{\r\n                        display: true,\r\n                        position: \"left\"\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React, {Component} from \"react\";\r\nimport Popup from 'reactjs-popup';\r\nimport Chart from './Chart';\r\n\r\nclass ChartPopup extends Component {\r\n    render() {\r\n        return(\r\n            <Popup\r\n                trigger={<button className=\"button\">Show graph</button>}\r\n                modal\r\n                closeOnDocumentClick\r\n            >\r\n                <Chart data={this.props.data} />\r\n            </Popup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartPopup;","import React, {Component} from \"react\";\r\nimport Table from \"./Table\";\r\nimport AddStockForm from \"./AddStockForm\";\r\nimport ChartPopup from './ChartPopup';\r\n\r\nconst API = \"R2XFYH8AEAQTGTHE\";\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: props.data,\r\n            submitted: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n    removeStock = index => {\r\n        this.setState({\r\n            data: this.state.data.filter((stock, i) => {\r\n                return i !== index;\r\n            })\r\n        });\r\n    };\r\n\r\n    handleSubmit = stock => {\r\n        let that = this;\r\n        let url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stock.symbol}&outputsize=compact&apikey=${API}`;\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = function (e) {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    let result = JSON.parse(xhr.responseText);\r\n                    const tsObj = result[\"Time Series (Daily)\"];\r\n                    if (typeof tsObj !== \"undefined\") {\r\n                        const dates = Object.keys(tsObj);\r\n                        stock.value = parseFloat(tsObj[dates[0]][\"4. close\"]).toFixed(2);\r\n                        stock.symbol = stock.symbol.toUpperCase();\r\n                        let newData = that.state.data;\r\n                        let exists = false;\r\n                        newData.forEach(function (st) {\r\n                            if (st.symbol === stock.symbol) {\r\n                                exists = true;\r\n                                st.value = stock.value;\r\n                                st.quantity = stock.quantity;\r\n                            }\r\n                        });\r\n                        if (!exists) {\r\n                            newData = [...that.state.data, stock];\r\n                        }\r\n                        if (newData.length <= 50) {\r\n                            that.setState({\r\n                                data: newData\r\n                            });\r\n                        }\r\n                        that.props.updateStockCookie(that.props.name, newData);\r\n                    }\r\n                } else {\r\n                    console.error(xhr.statusText);\r\n                }\r\n            }\r\n        };\r\n        xhr.send();\r\n    };\r\n\r\n    totalStockValue = () => {\r\n        let sum = 0;\r\n        let data = this.state.data;\r\n        for (let i = 0; i < data.length; i++) {\r\n            sum += parseFloat(data[i].value) * parseInt(data[i].quantity);\r\n        }\r\n        return sum.toFixed(2);\r\n    };\r\n\r\n    // getChartData = () => {\r\n    //     let chartData = {\r\n    //         labels: [],\r\n    //         data: []\r\n    //     };\r\n    //     const stocks = this.state.data;\r\n    //     for (let i = 0; i < stocks.length; i++) {\r\n    //         chartData.labels.push(stocks[i].symbol);\r\n    //         chartData.data.push(stocks[i].value);\r\n    //     }\r\n    //     return chartData;\r\n    // };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"portfolio-element\">\r\n                <div className=\"portfolio-header\">\r\n                    <p className=\"portfolio-name\">{this.props.name}</p>\r\n                    <button\r\n                        className=\"del-portfolio\"\r\n                        onClick={() => this.props.removePortfolio(this.props.name)}\r\n                    />\r\n                </div>\r\n                <Table\r\n                    data={this.state.data}\r\n                    removeStock={this.removeStock}\r\n                />\r\n                <p className=\"total-sum\">Total value of <b>{this.props.name}</b>: {this.totalStockValue()}</p>\r\n                <AddStockForm handleSubmit={this.handleSubmit} />\r\n                <ChartPopup data={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React, {Component} from \"react\";\r\n\r\nclass AddPortfolioForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = {\r\n            name: '',\r\n            data: []\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    };\r\n\r\n    submitForm = () => {\r\n        if (!(this.state.name === '')) {\r\n            this.props.handleSubmit(this.state);\r\n            this.setState(this.initialState);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n                <form onSubmit={e => { e.preventDefault(); }}>\r\n                    <label>Name:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        className=\"name-input-field\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange} />\r\n                    <input\r\n                        type=\"button\"\r\n                        value=\"Add portfolio\"\r\n                        onClick={this.submitForm} />\r\n                </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPortfolioForm;","export function setCookie(name,value,days) {\r\n    let expires = \"\";\r\n    // if (days) {\r\n    //     let date = new Date();\r\n    //     // date.setTime(date.getTime() + (days*24*60*60*1000));\r\n    //     expires = \"; expires=\" + date.toUTCString();\r\n    // }\r\n    // document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\r\n\r\n    let date = new Date();\r\n    date.setTime(date.getTime() + (10 * 365 * 24 * 60 * 60));\r\n    expires = \"; expires=\" + date.toUTCString();\r\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\r\n}\r\n\r\nexport function getCookie(name) {\r\n    let nameEQ = name + \"=\";\r\n    let ca = document.cookie.split(';');\r\n    for(let i=0;i < ca.length;i++) {\r\n        let c = ca[i];\r\n        while (c.charAt(0)===' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function eraseCookie(name) {\r\n    document.cookie = name+'=; Max-Age=-99999999;';\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport Portfolio from './components/Portfolio';\r\nimport AddPortfolioForm from './components/AddPortfolioForm';\r\nimport {setCookie, getCookie} from './utils';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            portfolios: props.data\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        setCookie(\"portfolios\", JSON.stringify(this.state.portfolios));\r\n    };\r\n\r\n    removePortfolio = name => {\r\n        this.setState({\r\n            portfolios: this.state.portfolios.filter((portfolio) => {\r\n                return portfolio.name !== name;\r\n            })\r\n        });\r\n    };\r\n\r\n    handleSubmit = portfolio => {\r\n        if (this.state.portfolios.length < 10) {\r\n            let exists = false;\r\n            this.state.portfolios.forEach(function (portf) {\r\n                if (portf.name === portfolio.name) {\r\n                    exists = true;\r\n                }\r\n            });\r\n            if (!exists) {\r\n                const newPortfolios = [...this.state.portfolios, portfolio];\r\n                this.setState({\r\n                    portfolios: newPortfolios\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    updateStockCookie = (name, newStockData) => {\r\n        let ports = this.state.portfolios;\r\n        for (let i = 0; i < ports.length; i++) {\r\n            if (ports[i].name === name) {\r\n                ports[i].data = newStockData;\r\n            }\r\n        }\r\n        setCookie(\"portfolios\", JSON.stringify(ports));\r\n    };\r\n\r\n    render() {\r\n        const objects = this.state.portfolios.map((portfolio) => {\r\n            return (\r\n                <Portfolio\r\n                    name={portfolio.name}\r\n                    data={portfolio.data}\r\n                    key={portfolio.name}\r\n                    removePortfolio={this.removePortfolio}\r\n                    updateStockCookie={this.updateStockCookie}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"global\">\r\n                <AddPortfolioForm handleSubmit={this.handleSubmit} />\r\n                <div className=\"portfolios-container\">\r\n                    {objects}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet cookie = getCookie(\"portfolios\");\r\nif (cookie == null) {\r\n    cookie = [];\r\n} else {\r\n    cookie = JSON.parse(cookie);\r\n}\r\n\r\nReactDOM.render(<App data={cookie}/>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}
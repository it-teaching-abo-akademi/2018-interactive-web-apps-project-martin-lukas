{"version":3,"sources":["components/Table.js","components/AddStockForm.js","components/Chart.js","components/ChartPopup.js","components/Portfolio.js","components/AddPortfolioForm.js","utils.js","index.js"],"names":["Table","react_default","a","createElement","className","Table_TableHeader","Table_TableBody","data","this","props","removeStock","Component","TableHeader","TableBody","stocks","map","stock","index","totalVal","parseFloat","quantity","value","toFixed","key","symbol","onClick","i","length","push","AddStockForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","submitForm","state","isNaN","handleSubmit","initialState","type","onChange","Chart","getRandomColor","color","Math","floor","random","labels","datasets","that","symbols","colors","_loop","url","concat","xhr","XMLHttpRequest","open","onload","e","readyState","status","tsObj","JSON","parse","responseText","dates","keys","dataset","label","fill","borderColor","j","toConsumableArray","console","error","statusText","send","es","options","maintainAspectRatio","title","display","text","fontSize","elements","point","radius","line","borderWidth","animation","duration","showLines","legend","position","ChartPopup","reactjs_popup_es","trigger","modal","closeOnDocumentClick","components_Chart","API","Portfolio","filter","assertThisInitialized","toUpperCase","newData","exists","forEach","st","updateStockCookie","totalStockValue","sum","parseInt","submitted","_this2","removePortfolio","components_Table","components_AddStockForm","components_ChartPopup","AddPortfolioForm","onSubmit","preventDefault","setCookie","date","Date","setTime","getTime","expires","toUTCString","document","cookie","App","portfolios","portfolio","portf","newPortfolios","newStockData","ports","stringify","objects","components_Portfolio","components_AddPortfolioForm","nameEQ","ca","split","c","charAt","substring","indexOf","getCookie","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.f7d7e8cf.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport '../style.css';\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"scroll\">\r\n            <table>\r\n                <TableHeader />\r\n\r\n                    <TableBody data={this.props.data} removeStock={this.props.removeStock} />\r\n\r\n            </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Symbol</th>\r\n                <th>Value</th>\r\n                <th>Quantity</th>\r\n                <th>Total value</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nconst TableBody = props => {\r\n    let stocks = props.data.map((stock, index) => {\r\n        let totalVal = (parseFloat(stock.quantity) * stock.value).toFixed(2);\r\n        return (\r\n            <tr key={index}>\r\n                <td>{stock.symbol}</td>\r\n                <td>{stock.value}</td>\r\n                <td>{stock.quantity}</td>\r\n                <td>{totalVal}</td>\r\n                <td>\r\n                    <button className=\"del-row\" onClick={() => props.removeStock(index)} />\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n    for (let i = props.data.length; i < 50; i++) {\r\n        stocks.push((\r\n            <tr className=\"empty-row\" key={i}><td /><td /><td /><td /><td /></tr>\r\n        ));\r\n    }\r\n\r\n    return <tbody>{stocks}</tbody>;\r\n};\r\n\r\nexport default Table;","import React, {Component} from \"react\";\r\n\r\nclass AddStockForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            symbol: '',\r\n            value: parseFloat(\"0.00\"),\r\n            quantity: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    // The state is updated every time the field values change\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    };\r\n\r\n    // Submit only with non-empty fields, or when the quantity is a number\r\n    submitForm = () => {\r\n        if (this.state.symbol !== '' && this.state.quantity !== '' && !isNaN(this.state.quantity)) {\r\n            this.props.handleSubmit(this.state);\r\n            this.setState(this.initialState);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"stock-form\">\r\n                <label>Symbol:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"symbol\"\r\n                    className=\"symbol-input-field\"\r\n                    value={this.state.symbol}\r\n                    onChange={this.handleChange} />\r\n                <label>Quantity:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"quantity\"\r\n                    className=\"quantity-input-field\"\r\n                    value={this.state.quantity}\r\n                    onChange={this.handleChange}/>\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Add\"\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddStockForm;","import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst API = \"R2XFYH8AEAQTGTHE\";\r\n\r\nclass Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: {\r\n                labels: [],\r\n                datasets: [],\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let that = this;\r\n        let data = this.props.data;\r\n        let symbols = [];\r\n        let colors = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            symbols.push(data[i].symbol);\r\n            colors.push(this.getRandomColor());\r\n        }\r\n        // AJAX request loop. Sets state to the responses.\r\n        // TODO There is a problem with timing I think. Not everytime do all the responses get rendered into the graph.\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            let url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbols[i]}&outputsize=compact&apikey=${API}`;\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", url, true);\r\n            xhr.onload = function (e) {\r\n                if (xhr.readyState === 4) {\r\n                    if (xhr.status === 200) {\r\n                        let result = JSON.parse(xhr.responseText);\r\n                        const tsObj = result[\"Time Series (Daily)\"];\r\n                        if (typeof tsObj !== \"undefined\") {\r\n                            let dates = Object.keys(tsObj);\r\n                            let dataset = {\r\n                                data: [],\r\n                                label: symbols[i],\r\n                                fill: false,\r\n                                borderColor: colors[i]\r\n                            };\r\n                            for (let j = 0; j < dates.length; j++) {\r\n                                dataset.data.push(parseFloat(tsObj[dates[j]][\"4. close\"]).toFixed(2));\r\n                            }\r\n                            that.setState({\r\n                                data: {\r\n                                    labels: dates,\r\n                                    datasets: [...that.state.data.datasets, dataset]\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        console.error(xhr.statusText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send();\r\n        }\r\n    }\r\n\r\n    getRandomColor = () => {\r\n        let letters = '0123456789ABCDEF';\r\n        let color = '#';\r\n        for (let i = 0; i < 6; i++) {\r\n            color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.data}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Comparison of stock values',\r\n                            fontSize: 20\r\n                        },\r\n                        elements: {\r\n                            point:{\r\n                                radius: 0\r\n                            },\r\n                            line:{\r\n                                borderWidth: 2\r\n                            }\r\n                        },\r\n                        animation: {\r\n                            duration: 0\r\n                        },\r\n                        showLines: true,\r\n                        fill: false\r\n                    }}\r\n                    legend={{\r\n                        display: true,\r\n                        position: \"left\"\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;\r\n","import React, {Component} from \"react\";\r\nimport Popup from 'reactjs-popup';\r\nimport Chart from './Chart';\r\n\r\nclass ChartPopup extends Component {\r\n    render() {\r\n        return(\r\n            <Popup\r\n                trigger={<button className=\"button\">Show graph</button>}\r\n                modal\r\n                closeOnDocumentClick\r\n            >\r\n                <Chart data={this.props.data} />\r\n            </Popup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartPopup;","import React, {Component} from \"react\";\r\nimport Table from \"./Table\";\r\nimport AddStockForm from \"./AddStockForm\";\r\nimport ChartPopup from './ChartPopup';\r\n\r\nconst API = \"R2XFYH8AEAQTGTHE\";\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: props.data,\r\n            submitted: false\r\n        };\r\n    }\r\n\r\n    removeStock = index => {\r\n        this.setState({\r\n            data: this.state.data.filter((stock, i) => {\r\n                return i !== index;\r\n            })\r\n        });\r\n    };\r\n\r\n    handleSubmit = stock => {\r\n        let that = this;\r\n        let url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stock.symbol}&outputsize=compact&apikey=${API}`;\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = function (e) {\r\n            if (xhr.readyState === 4) {\r\n                if (xhr.status === 200) {\r\n                    let result = JSON.parse(xhr.responseText);\r\n                    const tsObj = result[\"Time Series (Daily)\"];\r\n                    if (typeof tsObj !== \"undefined\") {\r\n                        const dates = Object.keys(tsObj);\r\n                        // Taking the first (most current) value of the stock, specifically it's closing value\r\n                        stock.value = parseFloat(tsObj[dates[0]][\"4. close\"]).toFixed(2);\r\n                        stock.symbol = stock.symbol.toUpperCase();\r\n                        let newData = that.state.data;\r\n                        let exists = false;\r\n                        // Testing if stock is in the portfolio; if so, the row just gets updated\r\n                        newData.forEach(function (st) {\r\n                            if (st.symbol === stock.symbol) {\r\n                                exists = true;\r\n                                st.value = stock.value;\r\n                                st.quantity = stock.quantity;\r\n                            }\r\n                        });\r\n                        if (!exists) {\r\n                            newData = [...that.state.data, stock];\r\n                        }\r\n                        if (newData.length <= 50) {\r\n                            that.setState({\r\n                                data: newData\r\n                            });\r\n                        }\r\n                        that.props.updateStockCookie(that.props.name, newData);\r\n                    }\r\n                } else {\r\n                    console.error(xhr.statusText);\r\n                }\r\n            }\r\n        };\r\n        xhr.send();\r\n    };\r\n\r\n    totalStockValue = () => {\r\n        let sum = 0;\r\n        let data = this.state.data;\r\n        for (let i = 0; i < data.length; i++) {\r\n            sum += parseFloat(data[i].value) * parseInt(data[i].quantity);\r\n        }\r\n        return sum.toFixed(2);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"portfolio-element\">\r\n                <div className=\"portfolio-header\">\r\n                    <p className=\"portfolio-name\">{this.props.name}</p>\r\n                    <button\r\n                        className=\"del-portfolio\"\r\n                        onClick={() => this.props.removePortfolio(this.props.name)}\r\n                    />\r\n                </div>\r\n                <Table\r\n                    data={this.state.data}\r\n                    removeStock={this.removeStock}\r\n                />\r\n                <p className=\"total-sum\">Total value of <b>{this.props.name}</b>: {this.totalStockValue()}</p>\r\n                <AddStockForm handleSubmit={this.handleSubmit} />\r\n                <ChartPopup data={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React, {Component} from \"react\";\r\n\r\nclass AddPortfolioForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.initialState = {\r\n            name: '',\r\n            data: []\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    // The state gets updated every time the input changes\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        });\r\n    };\r\n\r\n    // Submit only if the field is not empty\r\n    submitForm = () => {\r\n        if (!(this.state.name === '')) {\r\n            this.props.handleSubmit(this.state);\r\n            this.setState(this.initialState);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={e => { e.preventDefault(); }}>\r\n                <label>Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    className=\"name-input-field\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange} />\r\n                <input\r\n                    type=\"button\"\r\n                    value=\"Add portfolio\"\r\n                    onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPortfolioForm;","export function setCookie(name,value) {\r\n    let date = new Date();\r\n    date.setTime(date.getTime() + (10 * 365 * 24 * 60 * 60));\r\n    let expires = \"; expires=\" + date.toUTCString();\r\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\r\n}\r\n\r\nexport function getCookie(name) {\r\n    let nameEQ = name + \"=\";\r\n    let ca = document.cookie.split(';');\r\n    for(let i=0;i < ca.length;i++) {\r\n        let c = ca[i];\r\n        while (c.charAt(0)===' ') c = c.substring(1,c.length);\r\n        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length,c.length);\r\n    }\r\n    return null;\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport Portfolio from './components/Portfolio';\r\nimport AddPortfolioForm from './components/AddPortfolioForm';\r\nimport {setCookie, getCookie} from './utils';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            portfolios: props.data\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        setCookie(\"portfolios\", JSON.stringify(this.state.portfolios));\r\n    };\r\n\r\n    removePortfolio = name => {\r\n        this.setState({\r\n            portfolios: this.state.portfolios.filter((portfolio) => {\r\n                return portfolio.name !== name;\r\n            })\r\n        });\r\n    };\r\n\r\n    handleSubmit = portfolio => {\r\n        if (this.state.portfolios.length < 10) {\r\n            // Testing if portfolio with this name already exists\r\n            let exists = false;\r\n            this.state.portfolios.forEach(function (portf) {\r\n                if (portf.name === portfolio.name) {\r\n                    exists = true;\r\n                }\r\n            });\r\n            if (!exists) {\r\n                const newPortfolios = [...this.state.portfolios, portfolio];\r\n                this.setState({\r\n                    portfolios: newPortfolios\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    updateStockCookie = (name, newStockData) => {\r\n        let ports = this.state.portfolios;\r\n        for (let i = 0; i < ports.length; i++) {\r\n            if (ports[i].name === name) {\r\n                ports[i].data = newStockData;\r\n            }\r\n        }\r\n        setCookie(\"portfolios\", JSON.stringify(ports));\r\n    };\r\n\r\n    render() {\r\n        const objects = this.state.portfolios.map((portfolio) => {\r\n            return (\r\n                <Portfolio\r\n                    name={portfolio.name}\r\n                    data={portfolio.data}\r\n                    key={portfolio.name}\r\n                    removePortfolio={this.removePortfolio}\r\n                    updateStockCookie={this.updateStockCookie}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"global\">\r\n                <AddPortfolioForm handleSubmit={this.handleSubmit} />\r\n                <div className=\"portfolios-container\">\r\n                    {objects}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Setting the starting props for the app (either from cookie, or empty array)\r\nlet cookie = getCookie(\"portfolios\");\r\nif (cookie == null) {\r\n    cookie = [];\r\n} else {\r\n    cookie = JSON.parse(cookie);\r\n}\r\n\r\nReactDOM.render(<App data={cookie}/>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}